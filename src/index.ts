import { Application } from 'probot' // eslint-disable-line no-unused-vars
import { openPR } from './createPullRequest'
import express from 'express'

const eachInstallation = async (
  app: Application,
  callback: (value: any, index: number, array: any[]) => any
) => {
  const github = await app.auth()
  const installations = await github.paginate(
    github.apps.listInstallations.endpoint.merge({ per_page: 100 })
  )

  return installations.forEach(callback)
}

const eachRepository = async (
  app: Application,
  installation: any,
  callback: (repo: any, github: any) => void
) => {
  app.log.trace({ installation }, 'Fetching repositories for installation')
  const github = await app.auth(installation.id)
  const repositories = await github.paginate(
    github.apps.listRepos.endpoint.merge({ per_page: 100 }),
    response => {
      return response.data
    }
  )
  repositories.forEach(async repository => callback(repository, github))
}

export = (app: Application) => {
  const route = app.route('/send-key')
  route.use(express.json())
  route.post('*', async (req: any, res: any) => {
    const { communityName, deviceName, pubKey } = req.body
    if (
      !communityName ||
      !deviceName ||
      !pubKey
    ) {
      res.json({ error: 'missing parameter' })
      return
    }
    eachInstallation(app, (installation) => {
      eachRepository(app, installation, async (repo: any, github: any) => {
        try {
          await openPR(repo, github, {
            file: {
              path: `soporteremoto_${communityName}_${deviceName}`,
              content: `-----BEGIN RSA PUBLIC KEY-----\n${pubKey}\n-----END RSA PUBLIC KEY-----\n`
            },
            pr: {
              title: communityName + ' wants to be part of the LibreNet6 network',
              body: communityName + ' wants to be part of the LibreNet6 network, this is a pull-request generated by AlterMundi\'s remote support network.'
            }
          })
          console.log('Pull request send in name of ' + communityName)
        } catch (e) {
          console.log('can not create the pull-request', { e })
          res.json({ error: 'can not create the pull-request' })
          return
        }
        res.json({ ok: true })
      })
    })
  })
}
